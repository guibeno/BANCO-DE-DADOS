CREATE TABLE cadastro_pf_pj (
                                id_cadastro INTEGER PRIMARY KEY AUTOINCREMENT,
                                nome TEXT,
                                telefone TEXT,
                                endereco TEXT,
                                cpf TEXT UNIQUE,
                                cnpj TEXT UNIQUE
);

CREATE TABLE produtos (
                          id_produtos INTEGER PRIMARY KEY AUTOINCREMENT,
                          nome TEXT,
                          armazenado TEXT,
                          quantidade INTEGER,
                          valor REAL,
                          id_fornecedor INTEGER,
                          FOREIGN KEY (id_fornecedor) REFERENCES fornecedores (id_fornecedor)
);


CREATE TABLE fornecedores (
                              id_fornecedor INTEGER PRIMARY KEY AUTOINCREMENT,
                              nome TEXT,
                              telefone TEXT,
                              endereco TEXT
);

-- Tabela para armazenar as informações da venda
CREATE TABLE vendas (
                        id_venda INTEGER PRIMARY KEY AUTOINCREMENT,
                        id_cliente INTEGER,
                        data DATE,
                        quantidade_total INTEGER,
                        valor_total REAL,
                        FOREIGN KEY (id_cliente) REFERENCES cadastro_pf_pj(id_cadastro)
);
DROP TABLE vendas;

-- Tabela para armazenar os itens da venda (produtos vendidos, quantidade e preço unitário)
CREATE TABLE itens_venda (
                             id_item INTEGER PRIMARY KEY AUTOINCREMENT,
                             id_venda INTEGER,
                             id_produto INTEGER,
                             quantidade INTEGER,
                             preco_unitario REAL,
                             FOREIGN KEY (id_venda) REFERENCES vendas(id_venda),
                             FOREIGN KEY (id_produto) REFERENCES produtos(id_produtos)
);



-- Inserir 10 clientes
INSERT INTO cadastro_pf_pj (nome, telefone, endereco, cpf, cnpj) VALUES
                                                                     ('João Silva', '1234-5678', 'Rua A, 123', '123.456.789-09', NULL),
                                                                     ('Maria Oliveira', '9876-5432', 'Avenida B, 456', '987.654.321-00', NULL),
                                                                     ('Carlos Pereira', '3333-4444', 'Rua C, 789', '111.222.333-44', NULL),
                                                                     ('Ana Souza', '5555-6666', 'Rua D, 101', '222.333.444-55', NULL),
                                                                     ('Pedro Costa', '7777-8888', 'Rua E, 202', '333.444.555-66', NULL),
                                                                     ('Paula Lima', '9999-0000', 'Rua F, 303', '444.555.666-77', NULL),
                                                                     ('Lucas Martins', '1234-5679', 'Rua G, 404', '555.666.777-88', NULL),
                                                                     ('Julia Rocha', '2345-6789', 'Rua H, 505', '666.777.888-99', NULL),
                                                                     ('Felipe Almeida', '3456-7890', 'Rua I, 606', '777.888.999-00', NULL),
                                                                     ('Larissa Souza', '4567-8901', 'Rua J, 707', '888.999.000-11', NULL);

-- Inserir 4 fornecedores
INSERT INTO cadastro_pf_pj (nome, telefone, endereco, cpf, cnpj) VALUES
                                                                     ('Fornecedor A', '4002-5555', 'Avenida K, 100', NULL, '12.345.678/0001-90'),
                                                                     ('Fornecedor B', '4002-5556', 'Avenida L, 200', NULL, '23.456.789/0001-01'),
                                                                     ('Fornecedor C', '4002-5557', 'Avenida M, 300', NULL, '34.567.890/0001-12'),
                                                                     ('Fornecedor D', '4002-5558', 'Avenida N, 400', NULL, '45.678.901/0001-23');


-- Inserir 10 produtos
INSERT INTO produtos (nome, armazenado, quantidade, valor) VALUES
                                                               ('Lápis', 'Prateleira 1', 100, 1.50),
                                                               ('Borracha', 'Prateleira 2', 50, 2.00),
                                                               ('Caderno', 'Gôndola A', 200, 5.00),
                                                               ('Caneta', 'Prateleira 3', 150, 1.00),
                                                               ('Marca-texto', 'Prateleira 4', 80, 3.00),
                                                               ('Apontador', 'Prateleira 5', 120, 2.50),
                                                               ('Papel A4', 'Gôndola B', 500, 10.00),
                                                               ('Tesoura', 'Prateleira 6', 60, 4.50),
                                                               ('Papelaria (Caixa)', 'Gôndola C', 30, 25.00),
                                                               ('Cartucho de Impressora', 'Prateleira 7', 40, 20.00);

DROP TABLE produtos;

-- Inserir 10 fornecedores
INSERT INTO fornecedores (nome, telefone, endereco) VALUES
                                                        ('Fornecedor 1', '4002-5551', 'Avenida K, 100'),
                                                        ('Fornecedor 2', '4002-5552', 'Avenida L, 200'),
                                                        ('Fornecedor 3', '4002-5553', 'Avenida M, 300'),
                                                        ('Fornecedor 4', '4002-5554', 'Avenida N, 400'),
                                                        ('Fornecedor 5', '4002-5555', 'Avenida O, 500'),
                                                        ('Fornecedor 6', '4002-5556', 'Avenida P, 600'),
                                                        ('Fornecedor 7', '4002-5557', 'Avenida Q, 700'),
                                                        ('Fornecedor 8', '4002-5558', 'Avenida R, 800'),
                                                        ('Fornecedor 9', '4002-5559', 'Avenida S, 900'),
                                                        ('Fornecedor 10', '4002-5560', 'Avenida T, 1000');

-- Inserir 10 produtos e associar cada um a um fornecedor único
INSERT INTO produtos (nome, armazenado, quantidade, valor, id_fornecedor) VALUES
                                                                              ('Lápis', 'Prateleira 1', 100, 1.50, 1),
                                                                              ('Borracha', 'Prateleira 2', 50, 2.00, 2),
                                                                              ('Caderno', 'Gôndola A', 200, 5.00, 3),
                                                                              ('Caneta', 'Prateleira 3', 150, 1.00, 4),
                                                                              ('Marca-texto', 'Prateleira 4', 80, 3.00, 5),
                                                                              ('Apontador', 'Prateleira 5', 120, 2.50, 6),
                                                                              ('Papel A4', 'Gôndola B', 500, 10.00, 7),
                                                                              ('Tesoura', 'Prateleira 6', 60, 4.50, 8),
                                                                              ('Papelaria (Caixa)', 'Gôndola C', 30, 25.00, 9),
                                                                              ('Cartucho de Impressora', 'Prateleira 7', 40, 20.00, 10);

DROP TABLE produtos;


-- Inserir as vendas
INSERT INTO vendas (id_cliente, data, quantidade_total, valor_total) VALUES
                                                                         (1, '2024-11-06', 0, 0),
                                                                         (2, '2024-11-06', 0, 0),
                                                                         (3, '2024-11-06', 0, 0),
                                                                         (4, '2024-11-06', 0, 0),
                                                                         (5, '2024-11-06', 0, 0);

UPDATE vendas
SET data = DATE(data, '+1 day')
WHERE id_cliente = 1 AND data = '2024-11-06';

UPDATE vendas
SET data = DATE(data, '+2 day')
WHERE id_cliente = 2 AND data = '2024-11-06';

UPDATE vendas
SET data = DATE(data, '+3 day')
WHERE id_cliente = 3 AND data = '2024-11-06';

UPDATE vendas
SET data = DATE(data, '+4 day')
WHERE id_cliente = 4 AND data = '2024-11-06';

UPDATE vendas
SET data = DATE(data, '+5 day')
WHERE id_cliente = 5 AND data = '2024-11-06';




INSERT INTO itens_venda (id_venda, id_produto, quantidade, preco_unitario) VALUES
                                                                               (1, 1, 2, 1.50),
                                                                               (1, 2, 1, 2.00);

UPDATE vendas
SET quantidade_total = (SELECT SUM(quantidade) FROM itens_venda WHERE id_venda = 1),
    valor_total = (SELECT SUM(quantidade * preco_unitario) FROM itens_venda WHERE id_venda = 1)
WHERE id_venda = 1;

INSERT INTO itens_venda (id_venda, id_produto, quantidade, preco_unitario) VALUES
                                                                               (2, 3, 1, 5.00),
                                                                               (2, 5, 2, 3.00);

UPDATE vendas
SET quantidade_total = (SELECT SUM(quantidade) FROM itens_venda WHERE id_venda = 2),
    valor_total = (SELECT SUM(quantidade * preco_unitario) FROM itens_venda WHERE id_venda = 2)
WHERE id_venda = 2;

INSERT INTO itens_venda (id_venda, id_produto, quantidade, preco_unitario) VALUES
                                                                               (3, 6, 3, 2.50),
                                                                               (3, 4, 1, 1.00);

UPDATE vendas
SET quantidade_total = (SELECT SUM(quantidade) FROM itens_venda WHERE id_venda = 3),
    valor_total = (SELECT SUM(quantidade * preco_unitario) FROM itens_venda WHERE id_venda = 3)
WHERE id_venda = 3;

INSERT INTO itens_venda (id_venda, id_produto, quantidade, preco_unitario) VALUES
                                                                               (4, 7, 1, 10.00),
                                                                               (4, 8, 2, 4.50);

UPDATE vendas
SET quantidade_total = (SELECT SUM(quantidade) FROM itens_venda WHERE id_venda = 4),
    valor_total = (SELECT SUM(quantidade * preco_unitario) FROM itens_venda WHERE id_venda = 4)
WHERE id_venda = 4;

INSERT INTO itens_venda (id_venda, id_produto, quantidade, preco_unitario) VALUES
                                                                               (5, 9, 2, 25.00),
                                                                               (5, 10, 1, 20.00);

UPDATE vendas
SET quantidade_total = (SELECT SUM(quantidade) FROM itens_venda WHERE id_venda = 5),
    valor_total = (SELECT SUM(quantidade * preco_unitario) FROM itens_venda WHERE id_venda = 5)
WHERE id_venda = 5;


UPDATE produtos
SET valor = valor * 1.10
WHERE id_produtos % 2 = 0;


UPDATE produtos
SET valor = valor * 1.10
WHERE id_produtos IN (1, 2, 3, 4, 5);


SELECT v.id_cliente,
       SUM(iv.quantidade) AS quantidade_total,
       SUM(iv.quantidade * iv.preco_unitario) AS valor_total
FROM vendas v
         JOIN itens_venda iv ON v.id_venda = iv.id_venda
GROUP BY v.id_cliente;


SELECT p.nome AS produto,
       f.nome AS fornecedor
FROM produtos p
         JOIN fornecedores f ON p.id_fornecedor = f.id_fornecedor
WHERE p.quantidade < 100;



SELECT p.nome AS produto,
       SUM(iv.quantidade) AS quantidade_total,
       COUNT(DISTINCT v.id_cliente) AS clientes_distintos
FROM itens_venda iv
         JOIN produtos p ON iv.id_produto = p.id_produtos
         JOIN vendas v ON iv.id_venda = v.id_venda
GROUP BY p.id_produtos
ORDER BY quantidade_total DESC
LIMIT 4;


SELECT v.id_cliente,
       SUM(iv.quantidade * iv.preco_unitario) / COUNT(DISTINCT v.id_venda) AS ticket_medio
FROM vendas v
         JOIN itens_venda iv ON v.id_venda = iv.id_venda
GROUP BY v.id_cliente;

SELECT SUM(iv.quantidade * iv.preco_unitario) / COUNT(DISTINCT v.id_venda) AS ticket_medio_loja
FROM vendas v
         JOIN itens_venda iv ON v.id_venda = iv.id_venda;


SELECT strftime('%w', v.data) AS dia_da_semana,
       SUM(iv.quantidade) AS quantidade_total
FROM vendas v
         JOIN itens_venda iv ON v.id_venda = iv.id_venda
GROUP BY dia_da_semana
ORDER BY dia_da_semana;




SELECT CASE strftime('%w', v.data)
           WHEN '0' THEN 'Domingo'
           WHEN '1' THEN 'Segunda-feira'
           WHEN '2' THEN 'Terça-feira'
           WHEN '3' THEN 'Quarta-feira'
           WHEN '4' THEN 'Quinta-feira'
           WHEN '5' THEN 'Sexta-feira'
           WHEN '6' THEN 'Sábado'
           END AS dia_da_semana,
       SUM(iv.quantidade) AS quantidade_total
FROM vendas v
         JOIN itens_venda iv ON v.id_venda = iv.id_venda
GROUP BY dia_da_semana
ORDER BY strftime('%w', v.data);


SELECT p.id_fornecedor, f.nome AS fornecedor, SUM(iv.quantidade) AS quantidade_total_vendida
FROM itens_venda iv
         JOIN produtos p ON iv.id_produto = p.id_produtos
         JOIN fornecedores f ON p.id_fornecedor = f.id_fornecedor
GROUP BY p.id_fornecedor
ORDER BY quantidade_total_vendida DESC
LIMIT 1;




SELECT p.nome AS produto,
       f.nome AS fornecedor,
       c.nome AS cliente,
       v.data AS data_venda,
       iv.quantidade AS quantidade_vendida
FROM itens_venda iv
         JOIN produtos p ON iv.id_produto = p.id_produtos
         JOIN fornecedores f ON p.id_fornecedor = f.id_fornecedor
         JOIN vendas v ON iv.id_venda = v.id_venda
         JOIN cadastro_pf_pj c ON v.id_cliente = c.id_cadastro
WHERE p.id_produtos = (SELECT MIN(id_produtos) FROM produtos)
ORDER BY v.data;






WITH PrecosAntigos AS (
    SELECT iv.id_venda, iv.id_produto, iv.quantidade, p.valor AS preco_antigo  -- Usando o valor original do produto
    FROM itens_venda iv
             JOIN produtos p ON iv.id_produto = p.id_produtos
    WHERE p.id_produtos IN (1, 2, 3, 4, 5)  -- Filtrando os produtos que tiveram a alteração de preço
),
     PrecosAtualizados AS (
         SELECT iv.id_venda, iv.id_produto, iv.quantidade, p.valor * 1.1 AS preco_atualizado  -- Aplicando o aumento de 10%
         FROM itens_venda iv
                  JOIN produtos p ON iv.id_produto = p.id_produtos
     )
SELECT
    v.id_cliente,
    SUM(pa.quantidade) AS quantidade_total,  -- Quantidade total de itens vendidos
    SUM(pa.quantidade * pa.preco_antigo) AS total_venda_antiga,  -- Total com preços antigos
    SUM(pa.quantidade * pac.preco_atualizado) AS total_venda_nova  -- Total com preços novos
FROM vendas v
         JOIN PrecosAntigos pa ON v.id_venda = pa.id_venda
         JOIN PrecosAtualizados pac ON pac.id_venda = pa.id_venda
GROUP BY v.id_cliente;






WITH PrecosAntigos AS (
    SELECT iv.id_venda, iv.id_produto, iv.quantidade, p.valor AS preco_antigo
    FROM itens_venda iv
             JOIN produtos p ON iv.id_produto = p.id_produtos
    WHERE p.id_produtos IN (1, 2, 3, 4, 5)  -- Produtos afetados pela atualização
),
     PrecosAtualizados AS (
         SELECT iv.id_venda, iv.id_produto, iv.quantidade, p.valor AS preco_atualizado
         FROM itens_venda iv
                  JOIN produtos p ON iv.id_produto = p.id_produtos
     )
SELECT
    p.nome AS produto,
    COUNT(iv.id_produto) AS quantidade_vendida,
    SUM(pa.quantidade * pa.preco_antigo) AS total_venda_antiga,
    SUM(pa.quantidade * pac.preco_atualizado) AS total_venda_nova
FROM itens_venda iv
         JOIN PrecosAntigos pa ON iv.id_venda = pa.id_venda
         JOIN PrecosAtualizados pac ON iv.id_venda = pac.id_venda
         JOIN produtos p ON iv.id_produto = p.id_produtos
GROUP BY p.id_produtos;



WITH PrecosAntigos AS (
    SELECT iv.id_venda, iv.id_produto, iv.quantidade, p.valor * 1.0 AS preco_antigo  -- Preço antigo
    FROM itens_venda iv
             JOIN produtos p ON iv.id_produto = p.id_produtos
    WHERE p.id_produtos IN (1, 2, 3, 4, 5)  -- Produtos que sofreram alteração de preço
),
     PrecosAtualizados AS (
         SELECT iv.id_venda, iv.id_produto, iv.quantidade, p.valor * 1.1 AS preco_atualizado  -- Preço atualizado com 10% de aumento
         FROM itens_venda iv
                  JOIN produtos p ON iv.id_produto = p.id_produtos
     )
SELECT
    v.id_cliente,
    p.nome AS produto,
    SUM(pa.quantidade) AS quantidade_total,
    SUM(pa.quantidade * pa.preco_antigo) AS total_venda_antiga,  -- Total com os preços antigos
    SUM(pa.quantidade * pac.preco_atualizado) AS total_venda_nova,  -- Total com os preços novos
    (SUM(pa.quantidade * pac.preco_atualizado) - SUM(pa.quantidade * pa.preco_antigo)) AS diferenca_total  -- Diferença de valores (deve ser positiva, pois o preço subiu)
FROM vendas v
         JOIN PrecosAntigos pa ON v.id_venda = pa.id_venda
         JOIN PrecosAtualizados pac ON pac.id_venda = pa.id_venda
         JOIN produtos p ON pa.id_produto = p.id_produtos
GROUP BY v.id_cliente, p.id_produtos
ORDER BY diferenca_total DESC;




--produto que gerou mais receita depois do preço atualizado, insight criada
WITH PrecosAtualizados AS (
    SELECT iv.id_produto, iv.quantidade, p.valor * 1.1 AS preco_atualizado  -- Aplicando o aumento de 10%
    FROM itens_venda iv
             JOIN produtos p ON iv.id_produto = p.id_produtos
)
SELECT p.nome AS produto,
       SUM(pa.quantidade * pa.preco_atualizado) AS receita_total
FROM PrecosAtualizados pa
         JOIN produtos p ON pa.id_produto = p.id_produtos
GROUP BY p.id_produtos
ORDER BY receita_total DESC
LIMIT 1;
